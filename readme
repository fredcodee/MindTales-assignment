A Django backend service to manage restaurant menus and voting for a company's employees



# Lunch Picker

## Prerequisites
- Docker
- Docker Compose

## Getting Started

1. Clone the repository:
   git clone https://github.com/username/lunchpicker.git
   cd lunchpicker


2. Build and run the application:
    docker-compose up --build


## Features Overview:
### Authentication:
Users (employees) should authenticate using token-based authentication.
Endpoints to handle login and registration.

### Restaurant Management:
Restaurant CRUD operations.
Restaurants should upload daily menus through an API.
Menu linked to a specific restaurant and specific date.

### Menu Voting:
Old API version: Employees vote for a single menu.
New API version: Employees vote for top three menus with weighted points (1-3).
Versioning Support:

The API should read the mobile app version from headers.
Different endpoints or logic for handling old vs. new voting API.

### Menu Results:
An endpoint to fetch the results for the current dayâ€™s menu.


### API DOCUMENTATION
click here ...   https://github.com/fredcodee/MindTales-assignment/blob/main/Api%20Documentation.txt



### Cloud Architecture Diagram:
Components:
App Service/AKS: To host the Django API you can use Azure App Services or Azure Kubernetes 
Azure SQL: Database.
Load Balancer: For handling incoming traffic. Use Azure Load Balancer or Application Gateway to handle traffic.
Blob Storage: For static files (optional).
Azure Monitor: For logging and monitoring.

